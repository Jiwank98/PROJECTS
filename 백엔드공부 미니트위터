from flask import Flask,jsonify,request
from flask.json import JSONEncoder     #자료구조를 사용할수 없기 떄문에 리스트 형식으로 유저들을 저장하기 위해 필요하다

app=Flask(__name__)
app.users={}   # 유저들을 리스트로 저장하기 위해서
app.tweets=[]  #트윗 내용을 배열 형태로 저장하기 위해서
app.id_count =1  #저장되는 아이디를 1부터 차례로 올리기 위해서

class CustomJSONEncoder(JSONEncoder):
    def default(self,obj):
        if isinstance(obj,set):
            return list(obj)
        return JSONEncoder.default(self,obj)
app.json_encoder = CustomJSONEncoder           #JSONEncoder 이용하여 위에서 말했던 것처럼 리스트 형식으로 유저들을 저장할 수 있도록  변환해주는것!

@app.route("/ping",methods=['GET'])
def ping():
    return "pong"                           #저번에 한 실습인 간단한 서버가 잘 연결되있는지 볼 수 있는 핑퐁엔드포인트

@app.route("/sign-up",methods=['POST'])          #가입하는 경로(함수,주소)
def sign_up():
    new_user=request.json                         #새로운 유저에 정보를 받는다
    new_user["id"]=app.id_count                   # 새로운 유저 정보를 아이디카운트번호로 저장시켜주며 만든다.
    app.users[app.id_count]=new_user              # 새로운 유저정보를 원래 있던 유저들 리스트에 새로 등록해준다.
    app.id_count=app.id_count+1                   # 인원이 등록되었으므로 아이디카운트를 하나 올려준다.

    return jsonify(new_user)

@app.route("/tweet",methods=['POST'])             #트윗내용을 등록하는 경로(함수,주소)
def tweet():
    payload=request.json                          #등록하려는 아이디번호와 트윗내용을 클라이언트로 부터 받는다.
    user_id=int(payload['id'])
    tweet=payload['tweet']
    if user_id not in app.users:
        return '사용자가 존재하지 않습니다',400            #만약 받은 아이디번호가 존재하지 않는다면 400과함께 메세지 출력
    if len(tweet)>300:
        return '300자가 초과하였습니다',400               # 만약 받은 트윗내용길이가 300자 이상이라면 400과함께 메세지 출력(300자 제한)
    user_id=int(payload['id'])
    app.tweets.append(
        {
            'user_id': user_id,
            'tweet': tweet
        }
    )                                                 #받은 아이디번호에 따른 트윗내용을 정상적으로 리스트에 등록해준다.
    return '',200                                     #올바르게 성립됬다면 200과 함께 정상이라고 알려준다.

@app.route('/follow',methods=['POST'])                #다른사람을 팔로우하는 경로(함수,주소)
def follow():
    payload = request.json
    user_id=int(payload['id'])
    user_id_to_follow=int(payload['follow'])          # 자신의 아이디번호와 팔로우하려는 아이디번호를 클라이언트로부터 받는다.

    if user_id not in app.users or user_id_to_follow not in app.users:
        return '사용자가 존재하지 않습니다',400            # 만약 팔로우하려는 아이디번호나 클라이언트 아이디번호가 없다면 400과 함께 오류출력
    user=app.users[user_id]
    user.setdefault('follow',set()).add(user_id_to_follow)    #해당 클라이언트의 정보에 팔로우하려는 사람을 정상적으로 등록시킴
    return jsonify(user)

@app.route('/unfollow',methods=['POST'])              # 자신의 아이디번호와 언팔로우하려는 아이디번호를 클라이언트로부터 받는다.
def unfollow():
    payload=request.json
    user_id=int(payload['id'])
    user_id_to_follow=int(payload['unfollow'])

    if user_id not in app.users or user_id_to_follow not in app.users:
        return '사용자가 존재하지 않습니다',400          # 만약 언팔로우하려는 아이디번호나 클라이언트 아이디번호가 없다면 400과 함께 오류출력
    user=app.users[user_id]
    user.setdefault('follow',set()).discard(user_id_to_follow)        #해당 클라이언트의 팔로우명단에서 언팔로우하려는 사람을 정상적으로 삭제시킴
    return jsonify(user)

@app.route('/timeline/<int:user_id>',methods=['GET'])           #해당 아이디번호의 타임라인을 확인하는 경로(함수,주소)
def timeline(user_id):
    if user_id not in app.users:
        return '사용자가 존재하지 않습니다',400                     #아이디번호가 만약 등록되어 있지 않다면 400과 함께 오류 출력
    follow_list = app.users[user_id].get('follow',set())       #해당 아이디의 팔로우리스트를 정상적으로 받아온다
    follow_list.add(user_id)
    timeline=[tweet for tweet in app.tweets if tweet['user_id']in follow_list]  #타임라인의 이중배열로 팔로우하는 사람들의 번호와 트윗내용을 불러온다.
    return jsonify(
        {
            'user_id':user_id,
            'timeline':timeline
        }                                              #불러온 모든 팔로우하는 사람들의 아이디번호와 함께 각각의 트윗내용을 리턴해준다.
    )
